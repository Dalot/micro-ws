// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package observer

import (
	"sync"
)

// Ensure, that IObserverMock does implement IObserver.
// If this is not the case, regenerate this file with moq.
var _ IObserver = &IObserverMock{}

// IObserverMock is a mock implementation of IObserver.
//
// 	func TestSomethingThatUsesIObserver(t *testing.T) {
//
// 		// make and configure a mocked IObserver
// 		mockedIObserver := &IObserverMock{
// 			GetIDFunc: func() string {
// 				panic("mock out the GetID method")
// 			},
// 			UpdateFunc: func(bytes []byte)  {
// 				panic("mock out the Update method")
// 			},
// 		}
//
// 		// use mockedIObserver in code that requires IObserver
// 		// and then make assertions.
//
// 	}
type IObserverMock struct {
	// GetIDFunc mocks the GetID method.
	GetIDFunc func() string

	// UpdateFunc mocks the Update method.
	UpdateFunc func(bytes []byte)

	// calls tracks calls to the methods.
	calls struct {
		// GetID holds details about calls to the GetID method.
		GetID []struct {
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Bytes is the bytes argument value.
			Bytes []byte
		}
	}
	lockGetID  sync.RWMutex
	lockUpdate sync.RWMutex
}

// GetID calls GetIDFunc.
func (mock *IObserverMock) GetID() string {
	if mock.GetIDFunc == nil {
		panic("IObserverMock.GetIDFunc: method is nil but IObserver.GetID was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetID.Lock()
	mock.calls.GetID = append(mock.calls.GetID, callInfo)
	mock.lockGetID.Unlock()
	return mock.GetIDFunc()
}

// GetIDCalls gets all the calls that were made to GetID.
// Check the length with:
//     len(mockedIObserver.GetIDCalls())
func (mock *IObserverMock) GetIDCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetID.RLock()
	calls = mock.calls.GetID
	mock.lockGetID.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *IObserverMock) Update(bytes []byte) {
	if mock.UpdateFunc == nil {
		panic("IObserverMock.UpdateFunc: method is nil but IObserver.Update was just called")
	}
	callInfo := struct {
		Bytes []byte
	}{
		Bytes: bytes,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	mock.UpdateFunc(bytes)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedIObserver.UpdateCalls())
func (mock *IObserverMock) UpdateCalls() []struct {
	Bytes []byte
} {
	var calls []struct {
		Bytes []byte
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
